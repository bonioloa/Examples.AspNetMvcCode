namespace Comunica.ProcessManager.Web.Code;

public class HtmlContentReplacerWeb : IHtmlContentReplacerWeb
{
    //private readonly ILogger<HtmlContentReplacerWeb> _logger;

    private readonly MainLocalizer _localizer;
    private readonly IUrlHelper _urlHelper;

    public HtmlContentReplacerWeb(
        //ILogger<HtmlContentReplacerWeb> logger
        MainLocalizer localizer
        , IUrlHelper urlHelper
        )
    {
        //_logger = logger;
        _localizer = localizer;
        _urlHelper = urlHelper;
    }


    /// <summary>
    /// Apply this method to all content that can contain possible breaking code of V2 strings
    /// and also placeholders for site generated content 
    /// (IE links or paths, witch should not be saved in configuration but generated by site architecture)
    /// Content should always have only file names (maybe prefixed by tenant subpath) and placeholders for paths and links
    /// </summary>
    /// <param name="contentWithUrls"></param>
    /// <returns></returns>

    public IHtmlContent ContentStandardizePathAndRewriteUrlsForHtmlStrings(IHtmlContent contentWithUrls)
    {
        return contentWithUrls.Invalid()
            ? new HtmlString(string.Empty)
            : new HtmlString(
                contentWithUrls.GetStringContent()
                    .Replace(
                        "docs/" //V2 base documents path //TODO after migration to V3: change all links and paths to standard placeholder
                        , _urlHelper.Content(WebAppConstants.AppPathStaticDocuments)
                        , StringComparison.InvariantCultureIgnoreCase)

                    .Replace(
                        "layout3/" //V2 base images path //TODO after migration to V3: change all links and paths to standard placeholder
                        , _urlHelper.Content(WebAppConstants.AppPathTenantsLogo)
                        , StringComparison.InvariantCultureIgnoreCase)

                    .Replace(
                        "#baseUrlDocuments#" //placeholder V2-V3
                        , _urlHelper.Content(WebAppConstants.AppPathStaticDocuments)
                        , StringComparison.InvariantCultureIgnoreCase)

                    .Replace(
                        "#baseUrlImages#" //placeholder V2-V3
                        , _urlHelper.Content(WebAppConstants.AppPathTenantsLogo)
                        , StringComparison.InvariantCultureIgnoreCase)

                    //error report link with standard description
                    .Replace(
                        "#plhLinkToSendProblemReport#" //placeholder V3
                        , _urlHelper.LinkTagWithText(
                                MvcComponents.ActSendErrorReport
                                , MvcComponents.CtrlFeedback
                                , _localizer[nameof(LocalizedStr.ProblemReportLinkPageText)])
                        , StringComparison.InvariantCultureIgnoreCase)

                    //replace with error report url but a tag must be present in content.
                    //necessary in case customer wants a custom description for page link
                    .Replace(
                        "#plhUrlToSendProblemReport#"
                        , _urlHelper.Action(
                                MvcComponents.ActSendErrorReport
                                , MvcComponents.CtrlFeedback)
                        , StringComparison.InvariantCultureIgnoreCase)
            //.Replace(
            //    "Invia_modello4.asp" //process popup old link
            //    , _urlHelper.Action(MvcComponents.ActProcessSelection, MvcComponents.CtrlProcesses)
            //    , StringComparison.InvariantCultureIgnoreCase)
            //.Replace(
            //    "#channel-form" //process popup selection old id
            //    , "#process-select-form"
            //    , StringComparison.InvariantCultureIgnoreCase)
            );
    }
}