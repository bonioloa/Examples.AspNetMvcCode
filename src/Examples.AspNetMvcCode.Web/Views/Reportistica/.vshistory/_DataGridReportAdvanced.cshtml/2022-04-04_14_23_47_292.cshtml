@model ReportExportViewModel

@inject MainLocalizer _localizer

<div class="row row-line-x3-before row-line-after">
    <div class="col s12 m12 l12 xl12 row-line-x2-after"> 
        @*a simple form to keep available data for file generation from grid and antiforgery token necessary for ajax requests*@
        <form id="form-report-adv"
                method="post" 
                asp-antiforgery="true"
                class="ajax-post"
                autocomplete="off" >

            <input type="hidden" id="img" asp-for="TenantImage"/>
        </form>

        <div>        
            @(Html.DevExtreme()
                .DataGrid()
                .ID("reportDataGrid")
                .DataSource(new JS(Model.DataSourceGrid))
                .KeyExpr("Index")
                .Columns(columns => {ConfigureColumns(columns, Model.ColumnsOptionsList);})
                .AllowColumnReordering(true)
                .ColumnMinWidth(150)
                .ShowRowLines(true)
                .Scrolling( scrolling => scrolling.Mode(GridScrollingMode.Standard))
                .Scrolling( scr => scr.ShowScrollbar(ShowScrollbarMode.Always))
                .Scrolling( scrolling => scrolling.ColumnRenderingMode(GridColumnRenderingMode.Standard))
                .Selection(s => s.Mode(SelectionMode.Multiple))
                .Export(e => e.Enabled(true).AllowExportSelectedData(true))
                .OnExporting("exporting")
                .ShowBorders(true)
                .AllowColumnResizing(true)
    
                .Grouping(e =>e.AutoExpandAll(true))
                .GroupPanel(e =>e.Visible(true))

                .RowAlternationEnabled(true)
                .Paging(p => p.PageSize(10))
                .Pager(p => 
                        p.ShowPageSizeSelector(true)
                            .AllowedPageSizes(new[] { 10, 25, 50, 100 })
                    )
                .SearchPanel(s => 
                        s.Visible(true)
                            .HighlightCaseSensitive(true)
                    )
                .FilterRow(f => f.Visible(true))
                .HeaderFilter(f => f.Visible(true))
                .ColumnChooser(c => 
                    c.Enabled(true)
                        .Mode(GridColumnChooserMode.Select)
                    )

                .Toolbar(toolbar => {
                    toolbar.Items(items => {
                        items.Add().Name("groupPanel");
                        items.Add()
                                .Location(ToolbarItemLocation.After)
                                .Widget(w =>
                                    w.Button()
                                        .Icon("exportpdf")
                                        .Text(_localizer[nameof(LocalizedStr.DataGridExportToPdf)].ToString())
                                        .OnClick("exportToPDF")
                                    );
                        @*items.Add()
                                .Location(ToolbarItemLocation.Before)
                                .Widget(w =>
                                    w.Button()
                                        //.Icon("exportpdf")
                                        .Text("Save Layout")
                                        .OnClick("saveLayoutAsTemplate")
                            );
                        items.Add()
                                .Location(ToolbarItemLocation.Before)
                                .Widget(w =>
                                    w.Button()
                                        //.Icon("exportpdf")
                                        .Text("Load Layout")
                                        .OnClick("loadTemplateLayout")
                            );*@
                        items.Add().Name("exportButton");
                        items.Add().Name("columnChooserButton");
                        items.Add().Name("searchPanel");
                    });
            })
            )
        </div>


        @functions
        {
            public void ConfigureColumns(
                CollectionFactory<DataGridColumnBuilder<object>> columns
                , HashSet<ReportingColumnFeaturesModel> myColumns
            ) 
            {
                foreach (ReportingColumnFeaturesModel def in myColumns) 
                {
                    if(def.SerializedOptionColors.StringHasValue())
                    {
                        columns
                            .Add()
                            .DataField(def.ColumnName)
                            .CssClass("dx-column-color-cell")
                            .Option("ColorList", def.SerializedOptionColors)
                            .Option("ValueList", def.SerializedOptionValues)
                            .CellTemplate(
                                @<text>
                                    <% 
                                        var dict = { " " : " " };
                                        var values = JSON.parse(column.ValueList);
                                        var colors = JSON.parse(column.ColorList);

                                        for( i = 0; values.length > i ; i++)
                                        {
                                            dict[values[i]] = colors[i];
                                        }

                                        t = value; 
                                        var b = dict[t];
                                    %>
                                    <div id="bck" style="height:100%; background-color : <%- b %> "> <%- value %> </div>
                                </text>
                                );
                    }
                    else
                    {
                        if(def.Visible)
                        {
                            columns.Add()
                                   .DataField(def.ColumnName);
                        }
                        else
                        {
                            columns.Add()
                                   .DataField(def.ColumnName)
                                   .Visible(false);
                        }
                    }
                };
            }
        }
    </div> 
</div>