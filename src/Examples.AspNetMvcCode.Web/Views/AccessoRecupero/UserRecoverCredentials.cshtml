@model UserRecoverCredentialsViewModel

@inject IMainLocalizer _localizer
@inject IHtmlMainLocalizer _htmlLocalizer
@inject IAuthorizationCustomWeb _webAuthorizationCustom

@{
    Layout = MvcComponents.TemplatePanelPageFile;

    ViewData.SetTitle(_localizer[nameof(LocalizedStr.UserRecoverCredentialsFormPageTitle)]);
    ViewData.SetLogo(InfoAndLogo.CentralPanelLogoTenant);
    ViewData.SetShowLanguageSelector(true);
    ViewData.SetUseCaptcha(true);
}
@section styles
{
}
@section scripts
{
    <script defer>
        var SharedConstRecoverPage = Immutable.Map({        
                'UserRecoverCredentialsFormUserAnchorType': '@_localizer[nameof(LocalizedStr.UserRecoverCredentialsFormUserAnchorType)]',
                'UserRecoverCredentialsFormPasswordAnchorType': '@_localizer[nameof(LocalizedStr.UserRecoverCredentialsFormPasswordAnchorType)]',
        
                'UserRecoverCredentialsFormUserTitleType': '@_localizer[nameof(LocalizedStr.UserRecoverCredentialsFormUserTitleType)]',
                'UserRecoverCredentialsFormPasswordTitleType': '@_localizer[nameof(LocalizedStr.UserRecoverCredentialsFormPasswordTitleType)]'
            });
    </script>
    <partial name="@MvcComponents.SharedPartialIncludeMinifiableLocalFile" 
             model=@(new IncludeLocalFilesViewModel() 
                         { 
                             Type = IncludeType.Javascript
                             , BasePath = PathsStaticFilesRoot.AppPathScriptsPages
                             , FileName= "recover"
                         })/>
}
 

<div class="row row-line-after">
    <div class="col s12 m12 l12 xl12 ">
         @if (await _webAuthorizationCustom.TenantHasRegisteredConfigAsync())
         {
             @_htmlLocalizer[nameof(HtmlLocalization.UserRecoverCredentialsFormDisclaimerHtmlRegistered)]
         }

         @if (await _webAuthorizationCustom.TenantHasAnonymousConfigAsync())
         {
             @_htmlLocalizer[nameof(HtmlLocalization.UserRecoverCredentialsFormDisclaimerHtmlAnonymous)]
         }
    </div>
</div>

<div class="row row-line-x2-before row-line-after">
    <div class="col xl12 l12 m12 s12 center-align">
        @* JavaScript will fill text*@ 
        <h5 class="simple-panel-title "></h5> 
    </div>
</div>

<form asp-controller="@MvcComponents.CtrlAccessRecoverSave" 
      asp-action="@MvcComponents.ActRecoverUserDataSave"
      asp-antiforgery="true"
      method="post" 
      id="form-captcha-protected"
      class=""
      autocomplete="off">    

    @*JavaScript will apply validation rules and required attribute
        NOTE: user will be not validated with the standard rule,
        because there are users in production that violate that rule
        (less than 8 chars mainly...)*@
    <div class="row row-no-line-after" id="divlogin">
        <div class="input-field col xl12 l12 m12 s12">

            @await Component.InvokeAsync(
                typeof(FieldInputTextSimpleComp)
                , new FieldViewModel()
                    { 
                        FieldType = FieldType.InputTextSimple,
                        InputSimpleType = InputSimpleType.Text,
                        FieldName = nameof(Model.Login),
                        HideMandatorySymbol = true,
                        Description = new HtmlString(_localizer[nameof(LocalizedStr.SharedFieldUserLogin)]),
                    }
            )
        </div>              
    </div>

    <div class="row row-no-line-after" id="divemail">
        <div class="input-field col xl12 l12 m12 s12">
            
            @await Component.InvokeAsync(
                typeof(FieldInputTextSimpleComp)
                , new FieldViewModel()
                    { 
                        FieldType = FieldType.InputTextSimple,
                        InputSimpleType = InputSimpleType.Email,
                        FieldName = nameof(Model.Email),
                        HideMandatorySymbol = true,
                        Description = new HtmlString(_localizer[nameof(LocalizedStr.SharedFieldEmail)]),
                    }
            )
        </div>
    </div>
    
    <div class="row row-no-line-after">
        <div class="col xl12 l12 m12 s12">
            <a id="inputChangeAnchor" class="" href="#">
                <div id="anchorText"> </div>
                @*default:JavaScript will fill text*@ 
            </a>
        </div>
    </div>


    <div class="row row-line-x2-after">
    </div>

    @await Component.InvokeAsync(typeof(CaptchaComp))


    <partial name="@MvcComponents.SharedPartialButtonsBackSubmit" 
             model=@(
                        new ButtonsBackSubmitViewModel()
                        {
                            Id = "submit-recover-credentials",
                            SubmitLabel = _localizer[nameof(LocalizedStr.UserRecoverCredentialsFormSubmitButton)],
                            HideBackButtonComponent = false,
                            BackButtonUrlType = BackUrlConfig.TenantLogin,
                        })/>
</form>