@model InputControlViewModel

@inject MainLocalizer _localizer
@inject HtmlMainLocalizer _htmlLocalizer

@{ 
    string tmpAttributeIsOption = $"{WebAppConstants.HtmlAttrFieldHasOptions}={Model.FieldName}";
    string tmpAttributeChoiceType = $"{WebAppConstants.HtmlAttrFieldChoiceType}={Model.ControlType.ToString()}";
    string tmpAttributeHasRelatedField = string.Empty;
    string tmpValueSuffix = string.Empty;
    string tmpHtmlId = string.Empty;
    if (Model.RelatedFieldHtmlLabel.HasValue())
    {
        tmpAttributeHasRelatedField = WebAppConstants.HtmlAttrFieldHasRelated;
    }
    string tmpMandatorySymbol =
        Model.IsMandatory && !Model.HideMandatorySymbol && Model.Description.HasValue()
        ? WebAppConstants.HtmlMandatorySymbol
        : string.Empty;
    string tmpAttributeIsGroupMaster = string.Empty;
    if (Model.IsGroupsMaster)
    {
        tmpAttributeIsGroupMaster = $"{WebAppConstants.HtmlAttrMasterOfGroup}={Model.GroupId}";
    }
    long choicesOnSameLine = Model.ChoicesOnSameLine <= 1 ? 1 : Model.ChoicesOnSameLine;
    string gridClass = string.Empty;
    switch(choicesOnSameLine)
    {
        case 1:
            gridClass = "xl12 l12 m12 s12";
            break;
        case 2:
            gridClass = "xl6 l6 m6 s12";
            break;
        case 3:
            gridClass = "xl4 l4 m4 s12";
            break;
    }
    string tmpAttributeDivForField =  $"{WebAppConstants.HtmlAttrDivForField}={Model.FieldName}";
    string tmpHiddenLabel = string.Empty;
    if(Model.AdditionalClasses.StringHasValue() 
        && Model.AdditionalClasses.ContainsInvariant(WebAppConstants.HtmlClassHidden))
    {
        tmpHiddenLabel = WebAppConstants.HtmlClassHidden;
    }
    string tmpAttributeDependentField = string.Empty;
    if(Model.DependingField.StringHasValue())
    {
        tmpAttributeDependentField = $"{WebAppConstants.HtmlAttrHasDependent}={Model.DependingField}";
    }
}

<div class="placeholder-field div-as-label-option site-color-input-label @tmpHiddenLabel"
     @tmpAttributeDivForField @tmpAttributeIsOption @tmpAttributeHasRelatedField 
     @tmpAttributeChoiceType @tmpAttributeDependentField 
     @tmpAttributeIsGroupMaster>
    <span>@Model.Description@tmpMandatorySymbol</span>
    <span id="@Model.FieldName-error" 
            class="helper-text helper-options" data-error=""></span>
</div>

@foreach (OptionViewModel option in Model.ChoiceOptions)
{
    tmpValueSuffix = option.Value;
    //this is a trick to evade id html conflicts with the connected text field
    if(tmpValueSuffix.EqualsInvariant("ALTRO"))
    {
        tmpValueSuffix = option.Value + "_" + option.Value;
    }
    tmpHtmlId = $"{Model.FieldName}_{tmpValueSuffix}";

    <div class="col @gridClass option-space">
        <label>
            <input type="checkbox"
                   id="@tmpHtmlId" 
                   name="@Model.FieldName" 
                   class="filled-in validate @Model.AdditionalClasses" 
                   @(Model.IsMandatory ? WebAppConstants.HtmlAttrRequired : string.Empty)
                   value="@option.Value"
                   @(option.Selected ? WebAppConstants.HtmlAttrChecked : string.Empty)
                   @(option.Disabled ? WebAppConstants.HtmlAttrDisabled : string.Empty)/>
            @if(Model.ChoicesUseOnlyImagesAsDescription)
            {
                <span class="site-color-input-option"
                      ><img src="@(Url.Content(WebAppConstants.AppPathTenantsLogo + option.ImagePath))"
                         class="responsive-img"/>
                </span> 
            }
            else
            {
                <span class="site-color-input-option"
                      >@option.Description</span> 
            }
        </label>
    </div>
}