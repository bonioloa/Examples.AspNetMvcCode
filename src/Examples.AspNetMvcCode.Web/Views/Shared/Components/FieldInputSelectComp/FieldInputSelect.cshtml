@model FieldViewModel

@inject IMainLocalizer _localizer

@{
    string tmpAttributeIsOption = $"{WebAppConstants.HtmlAttrFieldHasOptions}={Model.FieldName}";
    string tmpAttributeChoiceType = $"{WebAppConstants.HtmlAttrFieldChoiceType}={Model.FieldType.ToString()}";
    string tmpAttributeHasRelatedField = string.Empty;
    if (Model.RelatedFieldHtmlLabel.HasValue())
    {
        tmpAttributeHasRelatedField = WebAppConstants.HtmlAttrFieldHasRelated;
    }
    string tmpMandatorySymbol =
            Model.IsMandatory && !Model.HideMandatorySymbol && Model.Description.HasValue()
            ? WebAppConstants.HtmlMandatorySymbol
            : string.Empty;
    string tmpAttributeDivForField =  $"{WebAppConstants.HtmlAttrDivForField}={Model.FieldName}";
    string tmpHiddenLabel = string.Empty;
    if(Model.AdditionalClasses.StringHasValue() 
        && Model.AdditionalClasses.ContainsInvariant(WebAppConstants.HtmlClassHidden))
    {
        tmpHiddenLabel = WebAppConstants.HtmlClassHidden;
    }
    string tmpAttributeDependentField = string.Empty;
    if(Model.DependingField.StringHasValue())
    {
        tmpAttributeDependentField = $"{WebAppConstants.HtmlAttrHasDependent}={Model.DependingField}";
    }
    string multipleAttribute = 
        Model.FieldType == FieldType.OptionsSelectMultiple
        ? WebAppConstants.HtmlAttrMultiple 
        : string.Empty;
}

@if(Model.UseFixedLabel)
{
    //NOTE: select is displayed by materialize as an input so we need to use the class for inputs
    <div class="placeholder-field div-as-label-input site-color-input-label @tmpHiddenLabel"
         @tmpAttributeDivForField @tmpAttributeIsOption @tmpAttributeHasRelatedField 
         @tmpAttributeChoiceType @tmpAttributeDependentField>
        <span>@Model.Description@tmpMandatorySymbol</span>
    </div>
}
<!select id="@Model.FieldName"
         name="@Model.FieldName" 
         class="get validate @Model.AdditionalClasses"
         @(Model.IsMandatory ? WebAppConstants.HtmlAttrRequired : string.Empty)
         @(Model.IsDisabled ? WebAppConstants.HtmlAttrDisabled : string.Empty)
         @(Model.IsReadOnly ? WebAppConstants.HtmlAttrReadOnly : string.Empty)
         @(multipleAttribute)
         >

    @*NOTE by construction all selects must have a selected value. If no value was provided, model should have default value selected
        Also default value must not be disabled (selectable) if not mandatory *@ 
    @foreach(OptionViewModel option in Model.Options)
    {
        <!option value="@option.Value"
                @(option.Selected ? WebAppConstants.HtmlAttrSelected:string.Empty)
                @(option.Disabled || Model.IsDisabled ? WebAppConstants.HtmlAttrDisabled: string.Empty)
                @(Model.IsReadOnly ? WebAppConstants.HtmlAttrReadOnly : string.Empty)
                >@if (option.Description.Invalid())
                 {
                    @_localizer[nameof(LocalizedStr.FieldOptionDefaultDescription)]
                 }
                 else 
                 {
                    @option.Description
                 }</!option>
    }
</!select>

@if(!Model.UseFixedLabel)
{
    <label for="@Model.FieldName"
           class="placeholder-field @tmpHiddenLabel" 
           @tmpAttributeIsOption @tmpAttributeHasRelatedField 
           @tmpAttributeChoiceType @tmpAttributeDependentField
           >@Model.Description@tmpMandatorySymbol
    </label>
}
<span id="@Model.FieldName-error" 
      class="helper-text helper-options" data-error=""></span>