@model UserLoginViewModel

@inject IMainLocalizer _localizer
@inject IHtmlMainLocalizer _htmlLocalizer
@inject IAuthorizationCustomWeb _webAuthorizationCustom


@if (await _webAuthorizationCustom.TenantHasSsoAsync())
{
    <div class="row row-line-before">
    </div>

    foreach(long ssoConfigId in Model.SsoConfigDict.Keys)
    {
        <form asp-controller="@MvcComponents.CtrlAccessSso" 
              asp-action="@MvcComponents.ActLoginUserSso"
              asp-antiforgery="true"
              method="post"
              autocomplete="off">
        

            <input type="hidden" name="@ParamsNames.SsoConfigId" value="@ssoConfigId"/>


            <partial name="@MvcComponents.SharedPartialButtonsBackSubmit" 
                     model=@(
                                new ButtonsBackSubmitViewModel()
                                {
                                    Id = "submit-sso-providers-"+ssoConfigId,
                                    SubmitLabel = Model.SsoConfigDict[ssoConfigId],
                                    HideBackButtonComponent = true,
                                    BackButtonUrlType = BackUrlConfig.Missing,
                                })/>

        </form>
    }

    <div class="row row-line-after">
    </div>
}


@* credentials inputs must be hidden in case of a SSO configuration
    that requires access only through SSO *@

@if (!await _webAuthorizationCustom.TenantHasSsoAsync() //NOT SSO
        || await _webAuthorizationCustom.TenantHasSsoOptionalAsync())
{
    <form asp-controller="@MvcComponents.CtrlAccessUserPost" 
          asp-action="@MvcComponents.ActLoginWithCredentials"
          asp-antiforgery="true"
          method="post"
          autocomplete="off">
   
            <div class="row row-line-before row-line-after">
                <div class="col xl12 l12 m12 s12 left-align">
                    @if (await _webAuthorizationCustom.TenantHasRegisteredConfigAsync())
                    {
                        @_htmlLocalizer[nameof(HtmlLocalization.UserLoginAreaRegisteredHtmlMessage)]
                    }

                    @if (await _webAuthorizationCustom.TenantHasAnonymousConfigAsync())
                    {
                        @_htmlLocalizer[nameof(HtmlLocalization.UserLoginAreaSupervisorHtmlMessage)]
                    }
                </div>
            </div>


            @*do not use placeholder in these fields 
                also do not user regex validation on user because 
                some existing logins do not pass validation*@
            <div class="row row-no-line-after">

                <div class="col xl12 l12 m12 s6 input-field left-align">
                    @await Component.InvokeAsync(
                        typeof(FieldInputTextSimpleComp)
                        , new FieldViewModel()
                            {
                                FieldType = FieldType.InputTextSimple,
                                InputSimpleType = InputSimpleType.Text,
                                FieldName = ParamsNames.UserLogin,
                                IsMandatory = true,
                                HideMandatorySymbol = true,
                                Description = new HtmlString(_localizer[nameof(LocalizedStr.SharedFieldUserLogin)]),
                            }
                    )
                </div>

                <div class="col xl12 l12 m12 s6 input-field left-align" >
                    @await Component.InvokeAsync(
                        typeof(FieldInputTextSimpleComp)
                        , new FieldViewModel()
                            {
                                FieldType = FieldType.InputTextSimple,
                                InputSimpleType = InputSimpleType.Password,
                                FieldName = ParamsNames.Password,
                                IsMandatory = true,
                                HideMandatorySymbol = true,
                                Description = new HtmlString(_localizer[nameof(LocalizedStr.SharedFieldPassword)]),
                            }
                    )
                </div>
            </div>
    
            <div class="row row-line-after">
                 <div class="col xl12 l12 m12 s12 left-align">
                    <a asp-controller="@MvcComponents.CtrlAccessRecover"
                       asp-action="@MvcComponents.ActRecoverUserData">
                        @_localizer[nameof(LocalizedStr.UserLoginRecoverLinkText)]
                    </a>
                </div>
            </div>
           @if (await _webAuthorizationCustom.TenantHasRegisteredConfigAsync()
                && await _webAuthorizationCustom.EnableRegistrationForUsersAsync())
           {
                <div class="row row-line-after">
                    <div class="col xl12 l12 m12 s12 left-align">
                        @_localizer[nameof(LocalizedStr.UserLoginRegistrationMessage)]
                        <br>
                        <a class="strong"
                           asp-controller="@MvcComponents.CtrlAccessRegistration"
                           asp-action="@MvcComponents.ActRegistrationGet">
                            @_localizer[nameof(LocalizedStr.UserLoginRegistrationLinkText)]
                        </a>
                    </div>
                </div>
           }


           <partial name="@MvcComponents.SharedPartialButtonsBackSubmit" 
                    model=@(
                                new ButtonsBackSubmitViewModel()
                                {
                                    Id = "submit-user-login-btn",
                                    SubmitLabel = _localizer[nameof(LocalizedStr.SharedUserLoginButton)],
                                    HideBackButtonComponent = false,
                                    BackButtonUrlType = BackUrlConfig.TenantLogin,
                                })/>

    </form>
} @* end if (sso checks) *@